#! /spin/software/nuke/10.0v4/linux/64/libnuke-10.0.4.so -nx
version 10.0 v4
define_window_layout_xml {<?xml version="1.0" encoding="UTF-8"?>
<layout version="1.0">
    <window x="0" y="0" w="2560" h="1405" maximized="1" screen="0">
        <splitter orientation="1">
            <split size="40"/>
            <dock id="" hideTitles="1" activePageId="Toolbar.1">
                <page id="Toolbar.1"/>
            </dock>
            <split size="1897" stretch="1"/>
            <splitter orientation="2">
                <split size="796"/>
                <dock id="" activePageId="Viewer.1">
                    <page id="uk.co.thefoundry.scripteditor.1"/>
                    <page id="Viewer.1"/>
                </dock>
                <split size="559"/>
                <dock id="" activePageId="DAG.1" focus="true">
                    <page id="DAG.1"/>
                    <page id="Curve Editor.1"/>
                    <page id="DopeSheet.1"/>
                    <page id="DAG.2"/>
                </dock>
            </splitter>
            <split size="615"/>
            <dock id="" activePageId="Properties.1">
                <page id="Properties.1"/>
            </dock>
        </splitter>
    </window>
</layout>
}
Root {
 inputs 0
 name /Network/Servers/xserve1.spinpro.com/mnt/useraccounts/eleroy/Documents/Erwan/nuke_RnD/mapoga/nuke-vector-matrix/temp/eleroy_wip_01.nk
 format "2048 1556 0 0 2048 1556 1 2K_Super_35(full-ap)"
 proxy_type scale
 proxy_format "1024 778 0 0 1024 778 1 1K_Super_35(full-ap)"
 colorManagement OCIO
 defaultViewerLUT "OCIO LUTs"
}
BackdropNode {
 inputs 0
 name BackdropNode1
 tile_color 0x667e7fff
 label Done
 note_font_size 40
 xpos -1982
 ypos -141
 bdwidth 201
 bdheight 563
}
BackdropNode {
 inputs 0
 name Backdrop_Done_and_documented
 tile_color 0x737f66ff
 label "Done and documented"
 note_font_size 40
 xpos -2284
 ypos -206
 bdwidth 262
 bdheight 621
}
BackdropNode {
 inputs 0
 name Backdrop_WIP
 tile_color 0x7f7366ff
 label WIP
 note_font_size 40
 xpos -1750
 ypos 2
 bdwidth 182
 bdheight 244
}
Noise {
 inputs 0
 center {1024 778}
 name Noise1
 xpos -1355
 ypos -283
}
Luma_to_Normals {
 name Luma_to_Normals
 xpos -1355
 ypos -257
 gain 11
}
Shuffle {
 blue black
 name Shuffle1
 label "in \[value in]-->out \[value out]"
 xpos -1355
 ypos -231
}
Group {
 inputs 0
 name RotateVector3_
 help "Rotate a Vector3 in 3 dimensions."
 knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\nif knob.name() == \"mode\":\n    if knob.value() == \"Knob\":\n        node\['rotate'].setEnabled(True)\n        node\['rot_order'].setEnabled(True)\n    else:\n        node\['rotate'].setEnabled(False)\n        node\['rot_order'].setEnabled(False)\n"
 xpos -2212
 ypos 373
 addUserKnob {20 main_tab l TemplateMatrix4}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {4 mode l "Rotate by" t "Either control the rotation by the knob present on this node, or via the Matrix input." M {Knob "Pixel Matrix" ""}}
 addUserKnob {26 ""}
 addUserKnob {4 rot_order l "rotation order" t "Specifies the order to apply euler angles to the rotation." M {XYZ XZY YXZ YZX ZXY ZYX "" "" ""}}
 rot_order ZXY
 addUserKnob {13 rotate}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorB
  xpos 0
  ypos -30
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 72
 }
set Ndbabe950 [stack 0]
 Shuffle {
  name vector_layer
  xpos 366
  ypos 68
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 366
  ypos 94
 }
 Dot {
  name Dot3
  tile_color 0x9e3c6300
  xpos 400
  ypos 156
 }
set Nf52e8240 [stack 0]
 Dot {
  name Dot6
  tile_color 0x9e3c6300
  xpos 220
  ypos 156
 }
 Group {
  name Magnitude_Vector3_
  help "Calculate the magnitude (scalar) of an input Vector3."
  xpos 186
  ypos 231
  addUserKnob {20 main_tab l "Magnitude Vector3"}
  addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
  addUserKnob {26 ""}
  addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
 }
  Input {
   inputs 0
   name vectorB
   xpos 0
  }
  Dot {
   name Dot1
   tile_color 0xcccccc00
   xpos 34
   ypos 108
  }
set N310c8670 [stack 0]
  Shuffle {
   name vector_layer
   xpos 140
   ypos 104
  }
  Remove {
   operation keep
   channels rgba
   name Remove1
   xpos 140
   ypos 130
  }
  Expression {
   channel0 rgba
   expr0 sqrt((r*r)+(g*g)+(b*b))
   channel2 {-rgba.red -rgba.green -rgba.blue none}
   channel3 {none none none -rgba.alpha}
   name Mag3
   xpos 140
   ypos 227
  }
  Dot {
   name Dot2
   tile_color 0xcccccc00
   xpos 174
   ypos 364
  }
push $N310c8670
  ShuffleCopy {
   inputs 2
   in2 none
   red red
   green green
   blue blue
   out {{{parent.UV_Channel.in}}}
   name ShuffleCopy1
   xpos 0
   ypos 360
  }
  Output {
   name Output1
   xpos 0
   ypos 506
  }
 end_group
 Dot {
  name Dot7
  tile_color 0xcccccc00
  xpos 220
  ypos 529
 }
push $Nf52e8240
 Dot {
  name Dot4
  tile_color 0x9e3c6300
  xpos 556
  ypos 156
 }
set N31e68fa0 [stack 0]
 Input {
  inputs 0
  name matrix
  xpos 614
  ypos -30
  number 1
 }
 CopyBBox {
  inputs 2
  name CopyBBox1
  xpos 614
  ypos 152
 }
push $N31e68fa0
 Dot {
  name Dot5
  tile_color 0x9e3c6300
  xpos 556
  ypos 198
 }
 Group {
  inputs 2
  name MultiplyVector3Matrix3_2
  help "Multiply (transform) a Vector3 by a Matrix3. This is the equivalent of applying Rotation/Scale/Skew from a Matrix to the vector.\nA Matrix4 can be used, but the last row/column will be ignored."
  xpos 614
  ypos 194
  addUserKnob {20 main_tab l "Mutiply Vector3 Matrix3"}
  addUserKnob {26 ""}
  addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
 }
  Input {
   inputs 0
   name InputMatrix3
   xpos 402
   ypos 7
   number 1
  }
  Dot {
   name Dot3
   tile_color 0xcccccc00
   xpos 436
   ypos 62
  }
add_layer {matrix0 matrix0.0 matrix0.1 matrix0.2 matrix0.3}
  Shuffle {
   in matrix0
   name Shuffle1
   label "in \[value in]-->out \[value out]"
   xpos 402
   ypos 109
  }
set N24e6a40 [stack 0]
add_layer {matrix1 matrix1.0 matrix1.1 matrix1.2 matrix1.3}
  Shuffle {
   in matrix1
   name Shuffle2
   label "in \[value in]-->out \[value out]"
   xpos 402
   ypos 147
  }
set Ne9db8090 [stack 0]
add_layer {matrix2 matrix2.0 matrix2.1 matrix2.2 matrix2.3}
  Shuffle {
   in matrix2
   name Shuffle3
   label "in \[value in]-->out \[value out]"
   xpos 402
   ypos 185
  }
set Nead98e20 [stack 0]
add_layer {matrix3 matrix3.0 matrix3.1 matrix3.2 matrix3.3}
  Shuffle {
   in matrix3
   name Shuffle4
   label "in \[value in]-->out \[value out]"
   xpos 402
   ypos 223
  }
push $Nead98e20
  Dot {
   name Dot7
   tile_color 0x9e3c6300
   xpos 343
   ypos 195
  }
push $Ne9db8090
  Dot {
   name Dot6
   tile_color 0x9e3c6300
   xpos 343
   ypos 157
  }
push $N24e6a40
  Dot {
   name Dot5
   tile_color 0x9e3c6300
   xpos 343
   ypos 119
  }
  Input {
   inputs 0
   name InputVector3
   xpos 219
   ypos 8
  }
  Dot {
   name Dot4
   tile_color 0xcccccc00
   xpos 253
   ypos 115
  }
  BlinkScript {
   inputs 4
   recompileCount 12
   ProgramGroup 1
   KernelDescription "2 \"TransformVector3byMatrix3\" iterate pixelWise 156e29276da8287b847626148a2a784d9969b7d1a3ad81e28187d00a7aaafaca 5 \"src\" Read Point \"matrix0\" Read Point \"matrix1\" Read Point \"matrix2\" Read Point \"dst\" Write Point 0 0 0"
   kernelSource "kernel TransformVector3byMatrix3 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix0; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix1; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix2; // the input image\n  Image<eWrite> dst; // the output image\n\n  void process() \{\n    // Read the input image\n    SampleType(src) input = src();\n    SampleType(matrix0) m0 = matrix0();\n    SampleType(matrix1) m1 = matrix1();\n    SampleType(matrix2) m2 = matrix2();\n\n    // Create the matrix object (matrix3 in this case)\n    float3x3  matrix;\n    matrix\[0]\[0] = m0.x;\n    matrix\[0]\[1] = m0.y;\n    matrix\[0]\[2] = m0.z;\n    matrix\[1]\[0] = m1.x;\n    matrix\[1]\[1] = m1.y;\n    matrix\[1]\[2] = m1.z;\n    matrix\[2]\[0] = m2.x;\n    matrix\[2]\[1] = m2.y;\n    matrix\[2]\[2] = m2.z;\n\n    // Multiply the Matrix and the Vector\n    float3 vector(input.x, input.y, input.z);\n    vector = matrix*vector;\n\n    // Write the result to the output image\n    dst() = float4(vector.x, vector.y, vector.z, input.w);\n  \}\n\};\n"
   rebuild ""
   rebuild_finalise ""
   name BlinkScript1
   xpos 219
   ypos 223
  }
  Output {
   name Output1
   xpos 219
   ypos 323
  }
 end_group
 Dot {
  name Dot2
  tile_color 0xcccccc00
  xpos 648
  ypos 364
 }
push $Nf52e8240
 ColorMatrix {
  matrix {
      {{Axis1.world_matrix.0} {Axis1.world_matrix.1} {Axis1.world_matrix.2}}
      {{Axis1.world_matrix.4} {Axis1.world_matrix.5} {Axis1.world_matrix.6}}
      {{Axis1.world_matrix.8} {Axis1.world_matrix.9} {Axis1.world_matrix.10}}
    }
  name ColorMatrix1
  xpos 366
  ypos 269
 }
 Switch {
  inputs 2
  which {{parent.mode}}
  name Switch1
  xpos 366
  ypos 360
 }
 Group {
  name NormalizeVector3_
  help "Normalize the magnitude of a Vector3 (to be of magnitude 1)"
  xpos 366
  ypos 450
  addUserKnob {20 main_tab l "Normalize Vector3"}
  addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
  addUserKnob {26 ""}
  addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
 }
  Input {
   inputs 0
   name vectorB
   xpos 0
  }
  Dot {
   name Dot1
   tile_color 0xcccccc00
   xpos 34
   ypos 108
  }
set N23a3310 [stack 0]
  Shuffle {
   name vector_layer
   xpos 140
   ypos 104
  }
  Remove {
   operation keep
   channels rgba
   name Remove1
   xpos 140
   ypos 130
  }
  Dot {
   name Dot3
   tile_color 0x9e3c6300
   xpos 174
   ypos 156
  }
set Ne7eeabb0 [stack 0]
push $Ne7eeabb0
  Dot {
   name Dot4
   tile_color 0x9e3c6300
   xpos 377
   ypos 156
  }
  Expression {
   channel0 rgba
   expr0 sqrt((r*r)+(g*g)+(b*b))
   channel2 {-rgba.red -rgba.green -rgba.blue none}
   channel3 {none none none -rgba.alpha}
   name Mag3
   xpos 343
   ypos 209
  }
  Dot {
   name Dot5
   tile_color 0xcccccc00
   xpos 377
   ypos 271
  }
  Merge2 {
   inputs 2
   operation divide
   bbox B
   name Merge1
   xpos 140
   ypos 267
  }
  Dot {
   name Dot2
   tile_color 0x4b5ec600
   xpos 174
   ypos 364
  }
push $N23a3310
  ShuffleCopy {
   inputs 2
   in2 none
   red red
   green green
   blue blue
   out {{{parent.UV_Channel.in}}}
   name ShuffleCopy1
   xpos 0
   ypos 360
  }
  Output {
   name Output1
   xpos 0
   ypos 506
  }
 end_group
 Merge2 {
  inputs 2
  operation multiply
  bbox B
  name Merge1
  xpos 366
  ypos 525
 }
 Dot {
  name Dot8
  tile_color 0x4b5ec600
  xpos 400
  ypos 601
 }
push $Ndbabe950
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 597
 }
 Output {
  name Output1
  xpos 0
  ypos 671
 }
 Axis2 {
  inputs 0
  rot_order {{parent.rot_order x1 2}}
  rotate {{parent.rotate.x} {parent.rotate.y} {parent.rotate.z}}
  name Axis1
  xpos 471
  ypos 252
 }
end_group
Viewer {
 frame_range 1-100
 name Viewer1
 xpos -1419
 ypos 290
}
Group {
 inputs 0
 name RotateVector2_
 help "Rotate a 2D vector on the same 2D plane."
 knobChanged "\nnode = nuke.thisNode()\nknob = nuke.thisKnob()\nif knob.name() == \"mode\":\n    if knob.value() == \"Knob (Degrees 0-360)\":\n        node\['angle'].setEnabled(True)\n    else:\n        node\['angle'].setEnabled(False)\n"
 xpos -2211
 ypos 326
 addUserKnob {20 main_tab l "Rotate Vector2"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {4 mode l "Rotate by" t "Pick whether to rotate the input vector by:\nKnob (Degrees 0-360)\nAngle Map (Degrees 0-360)\nAngle Map (Degrees 0-1)\nAngle Map (Radians)\n\nAn Angle map is a single channel image (expected in red channel) that represents an angle value at each pixel." M {"Knob (Degrees 0-360)" "Angle Map (Degrees 0-360)" "Angle Map (Degrees 0-1)" "Angle Map (Radians)" "" "" ""}}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {7 angle l Angle R -180 180}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name angleMap
  xpos 479
  ypos 5
  number 1
 }
 Multiply {
  channels rgb
  value 360
  name Multiply_360
  xpos 479
  ypos 90
  disable {{parent.mode!=2}}
 }
 Expression {
  expr0 radians(r)
  name Degrees_to_Radians
  xpos 479
  ypos 132
  disable {{parent.mode==3}}
 }
 Dot {
  name Dot5
  tile_color 0xcccccc00
  xpos 513
  ypos 249
 }
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N8a49d10 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 Dot {
  name Dot3
  tile_color 0x9e3c6300
  xpos 174
  ypos 181
 }
set N31f4270 [stack 0]
 Dot {
  name Dot4
  tile_color 0x9e3c6300
  xpos 372
  ypos 181
 }
 MergeExpression {
  inputs 2
  expr0 "Br * cos(Ar) - Bg * sin(Ar)"
  expr1 "Br * sin(Ar) + Bg * cos(Ar)"
  name MergeExpression1
  xpos 338
  ypos 245
 }
 Dot {
  name Dot6
  tile_color 0x4b5ec600
  xpos 372
  ypos 311
 }
push $N31f4270
 Expression {
  temp_name0 angleRad
  temp_expr0 radians(parent.angle)
  expr0 "r * cos(angleRad) - g * sin(angleRad)"
  expr1 "r * sin(angleRad) + g * cos(angleRad)"
  name Rotation
  xpos 140
  ypos 240
 }
 Switch {
  inputs 2
  which {{parent.mode!=0}}
  name Switch1
  xpos 140
  ypos 307
 }
 Dot {
  name Dot2
  tile_color 0xcccccc00
  xpos 174
  ypos 364
 }
push $N8a49d10
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name MultiplyVector3Matrix3_
 help "Multiply (transform) a Vector3 by a Matrix3. This is the equivalent of applying Rotation/Scale/Skew from a Matrix to the vector.\nA Matrix4 can be used, but the last row/column will be ignored."
 xpos -2217
 ypos -119
 addUserKnob {20 main_tab l "Mutiply Vector3 Matrix3"}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name InputMatrix3
  xpos 402
  ypos 7
  number 1
 }
 Dot {
  name Dot3
  tile_color 0xcccccc00
  xpos 436
  ypos 62
 }
 Shuffle {
  in matrix0
  name Shuffle1
  label "in \[value in]-->out \[value out]"
  xpos 402
  ypos 109
 }
set Ne478bfd0 [stack 0]
 Shuffle {
  in matrix1
  name Shuffle2
  label "in \[value in]-->out \[value out]"
  xpos 402
  ypos 147
 }
set Nd8882950 [stack 0]
 Shuffle {
  in matrix2
  name Shuffle3
  label "in \[value in]-->out \[value out]"
  xpos 402
  ypos 185
 }
set N2858d430 [stack 0]
 Shuffle {
  in matrix3
  name Shuffle4
  label "in \[value in]-->out \[value out]"
  xpos 402
  ypos 223
 }
push $N2858d430
 Dot {
  name Dot7
  tile_color 0x9e3c6300
  xpos 343
  ypos 195
 }
push $Nd8882950
 Dot {
  name Dot6
  tile_color 0x9e3c6300
  xpos 343
  ypos 157
 }
push $Ne478bfd0
 Dot {
  name Dot5
  tile_color 0x9e3c6300
  xpos 343
  ypos 119
 }
 Input {
  inputs 0
  name InputVector3
  xpos 219
  ypos 8
 }
 Dot {
  name Dot4
  tile_color 0xcccccc00
  xpos 253
  ypos 115
 }
 BlinkScript {
  inputs 4
  recompileCount 12
  ProgramGroup 1
  KernelDescription "2 \"TransformVector3byMatrix3\" iterate pixelWise 156e29276da8287b847626148a2a784d9969b7d1a3ad81e28187d00a7aaafaca 5 \"src\" Read Point \"matrix0\" Read Point \"matrix1\" Read Point \"matrix2\" Read Point \"dst\" Write Point 0 0 0"
  kernelSource "kernel TransformVector3byMatrix3 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix0; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix1; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix2; // the input image\n  Image<eWrite> dst; // the output image\n\n  void process() \{\n    // Read the input image\n    SampleType(src) input = src();\n    SampleType(matrix0) m0 = matrix0();\n    SampleType(matrix1) m1 = matrix1();\n    SampleType(matrix2) m2 = matrix2();\n\n    // Create the matrix object (matrix3 in this case)\n    float3x3  matrix;\n    matrix\[0]\[0] = m0.x;\n    matrix\[0]\[1] = m0.y;\n    matrix\[0]\[2] = m0.z;\n    matrix\[1]\[0] = m1.x;\n    matrix\[1]\[1] = m1.y;\n    matrix\[1]\[2] = m1.z;\n    matrix\[2]\[0] = m2.x;\n    matrix\[2]\[1] = m2.y;\n    matrix\[2]\[2] = m2.z;\n\n    // Multiply the Matrix and the Vector\n    float3 vector(input.x, input.y, input.z);\n    vector = matrix*vector;\n\n    // Write the result to the output image\n    dst() = float4(vector.x, vector.y, vector.z, input.w);\n  \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript1
  xpos 219
  ypos 223
 }
 Output {
  name Output1
  xpos 219
  ypos 323
 }
end_group
Group {
 inputs 0
 name MagnitudeVector2_
 help "Calculate the magnitude (scalar) of an input Vector2."
 xpos -2220
 ypos -76
 addUserKnob {20 main_tab l "Magnitude Vector2"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N75db0d0 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 Expression {
  channel0 rgba
  expr0 sqrt((r*r)+(g*g))
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  channel3 {none none none -rgba.alpha}
  name Mag2
  xpos 140
  ypos 218
 }
 Dot {
  name Dot2
  tile_color 0xcccccc00
  xpos 174
  ypos 364
 }
push $N75db0d0
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name Magnitude_Vector3_
 help "Calculate the magnitude (scalar) of an input Vector3."
 xpos -2218
 ypos -35
 addUserKnob {20 main_tab l "Magnitude Vector3"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N3f91a00 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 Expression {
  channel0 rgba
  expr0 sqrt((r*r)+(g*g)+(b*b))
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  channel3 {none none none -rgba.alpha}
  name Mag3
  xpos 140
  ypos 227
 }
 Dot {
  name Dot2
  tile_color 0xcccccc00
  xpos 174
  ypos 364
 }
push $N3f91a00
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name NormalizeVector3_
 help "Normalize the magnitude of a Vector3 (to be of magnitude 1)"
 xpos -2218
 ypos 44
 addUserKnob {20 main_tab l "Normalize Vector3"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N792f390 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 Dot {
  name Dot3
  tile_color 0x9e3c6300
  xpos 174
  ypos 156
 }
set Ne7eccb90 [stack 0]
push $Ne7eccb90
 Dot {
  name Dot4
  tile_color 0x9e3c6300
  xpos 377
  ypos 156
 }
 Expression {
  channel0 rgba
  expr0 sqrt((r*r)+(g*g)+(b*b))
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  channel3 {none none none -rgba.alpha}
  name Mag3
  xpos 343
  ypos 209
 }
 Dot {
  name Dot5
  tile_color 0xcccccc00
  xpos 377
  ypos 271
 }
 Merge2 {
  inputs 2
  operation divide
  bbox B
  name Merge1
  xpos 140
  ypos 267
 }
 Dot {
  name Dot2
  tile_color 0x4b5ec600
  xpos 174
  ypos 364
 }
push $N792f390
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name NormalizeVector2_
 help "Normalize the magnitude of a Vector2 (to be of magnitude 1)"
 xpos -2216
 ypos 2
 addUserKnob {20 main_tab l "Normalize Vector2"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N78cf630 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
set N78e2f00 [stack 0]
push $N78e2f00
 Expression {
  channel0 {rgba.red rgba.green -rgba.blue -rgba.alpha}
  expr0 sqrt((r*r)+(g*g))
  channel1 {-rgba.red -rgba.green rgba.blue rgba.alpha}
  expr1 1
  channel2 {-rgba.red -rgba.green -rgba.blue none}
  channel3 {none none none -rgba.alpha}
  name Mag2
  xpos 289
  ypos 216
 }
 Merge2 {
  inputs 2
  operation divide
  bbox B
  name Merge1
  xpos 140
  ypos 267
 }
 Dot {
  name Dot2
  tile_color 0x4b5ec600
  xpos 174
  ypos 364
 }
push $N78cf630
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name DotProductVector2_
 help "Calculates the dot product of 2 Vector2 inputs."
 xpos -2219
 ypos 103
 addUserKnob {20 main_tab l "Dot Product Vector2"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {41 in_1 l "Vector A Layer" t "Layer containing the vector information for input A" T vector_layer1.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorA
  xpos 457
  ypos -6
  number 1
 }
 Shuffle {
  name vector_layer1
  xpos 457
  ypos 103
 }
 Remove {
  operation keep
  channels rgba
  name Remove2
  xpos 457
  ypos 129
 }
 Dot {
  name Dot3
  tile_color 0x9e3c6300
  xpos 491
  ypos 210
 }
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N78454e0 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 MergeExpression {
  inputs 2
  channel0 rgb
  expr0 Br*Ar+Bg*Ag
  channel1 none
  channel2 none
  channel3 none
  name MergeExpression1
  xpos 140
  ypos 206
 }
 Dot {
  name Dot2
  tile_color 0x4b5ec600
  xpos 174
  ypos 364
 }
push $N78454e0
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name DotProductVector3_
 help "Calculates the dot product of 2 Vector3 inputs."
 xpos -2215
 ypos 152
 addUserKnob {20 main_tab l "Dot Product Vector3"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {41 in_1 l "Vector A Layer" t "Layer containing the vector information for input A" T vector_layer1.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorA
  xpos 457
  ypos -6
  number 1
 }
 Shuffle {
  name vector_layer1
  xpos 457
  ypos 103
 }
 Remove {
  operation keep
  channels rgba
  name Remove2
  xpos 457
  ypos 129
 }
 Dot {
  name Dot3
  tile_color 0x9e3c6300
  xpos 491
  ypos 210
 }
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N79e48f0 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 MergeExpression {
  inputs 2
  channel0 rgb
  expr0 Br*Ar+Bg*Ag+Bb*Ab
  channel1 none
  channel2 none
  channel3 none
  name MergeExpression1
  xpos 140
  ypos 206
 }
 Dot {
  name Dot2
  tile_color 0x4b5ec600
  xpos 174
  ypos 364
 }
push $N79e48f0
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name CrossProductVector2_
 help "Calculates the cross product of 2 Vector2 inputs."
 xpos -2213
 ypos 205
 addUserKnob {20 main_tab l "Cross Product Vector2"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {41 in_1 l "Vector A Layer" t "Layer containing the vector information for input A" T vector_layer1.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorA
  xpos 457
  ypos -6
  number 1
 }
 Shuffle {
  name vector_layer1
  xpos 457
  ypos 103
 }
 Remove {
  operation keep
  channels rgba
  name Remove2
  xpos 457
  ypos 129
 }
 Dot {
  name Dot3
  tile_color 0x9e3c6300
  xpos 491
  ypos 210
 }
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N71872f0 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 MergeExpression {
  inputs 2
  channel0 rgb
  expr0 "Br*Ag - Bg*Ar"
  name MergeExpression2
  xpos 140
  ypos 206
 }
 Dot {
  name Dot2
  tile_color 0x4b5ec600
  xpos 174
  ypos 364
 }
push $N71872f0
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
Group {
 inputs 0
 name CrossProductVector3_
 help "Calculates the cross product of 2 Vector3 inputs."
 xpos -2213
 ypos 261
 addUserKnob {20 main_tab l "Cross Product Vector3"}
 addUserKnob {41 in l "Vector B Layer" t "Layer containing the vector information for input B" T vector_layer.in}
 addUserKnob {41 in_1 l "Vector A Layer" t "Layer containing the vector information for input A" T vector_layer1.in}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name vectorA
  xpos 457
  ypos -6
  number 1
 }
 Shuffle {
  name vector_layer1
  xpos 457
  ypos 103
 }
 Remove {
  operation keep
  channels rgba
  name Remove2
  xpos 457
  ypos 129
 }
 Dot {
  name Dot3
  tile_color 0x9e3c6300
  xpos 491
  ypos 210
 }
 Input {
  inputs 0
  name vectorB
  xpos 0
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos 108
 }
set N762f800 [stack 0]
 Shuffle {
  name vector_layer
  xpos 140
  ypos 104
 }
 Remove {
  operation keep
  channels rgba
  name Remove1
  xpos 140
  ypos 130
 }
 MergeExpression {
  inputs 2
  expr0 "Ag*Bb - Ab*Bg"
  expr1 "Ab*Br - Ar*Bb"
  expr2 "Ar*Bg - Ag*Br"
  name MergeExpression2
  xpos 140
  ypos 206
 }
 Dot {
  name Dot2
  tile_color 0x4b5ec600
  xpos 174
  ypos 364
 }
push $N762f800
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  out {{{parent.UV_Channel.in}}}
  name ShuffleCopy1
  xpos 0
  ypos 360
 }
 Output {
  name Output1
  xpos 0
  ypos 506
 }
end_group
